/* jquery.scrollex v0.2.1 | (c) @ajlkn | github.com/ajlkn/jquery.scrollex | MIT licensed */
i
};
break;
case "bottom-only": h = function (t, e, n, i, o) {
    return n >= o && o >= t
};
break;
default: case "default": h = function (t, e, n, i, o) {
    return n >= i && o >= t
}
}
return c = function (t) {
    var i, o, l, s, r, a, u = this.state,
        h = !1,
        c = this.$element.offset();
    i = n.height(), o = t + i / 2, l = t + i, s = this.$element.outerHeight(), r = c.top + e(this.options.top, s, i), a = c.top + s - e(this.options.bottom, s, i), h = this.test(t, o, l, r, a), h != u && (this.state = h, h ? this.options.enter && this.options.enter.apply(this.element) : this.options.leave && this.options.leave.apply(this.element)), this.options.scroll && this.options.scroll.apply(this.element, [(o - r) / (a - r)])
}, p = {
    id: a,
    options: u,
    test: h,
    handler: c,
    state: null,
    element: this,
    $element: s,
    timeoutId: null
}, o[a] = p, s.data("_scrollexId", p.id), p.options.initialize && p.options.initialize.apply(this), s
}, jQuery.fn.unscrollex = function () {
    var e = t(this);
    if (0 == this.length) return e;
    if (this.length > 1) {
        for (var n = 0; n < this.length; n++) t(this[n]).unscrollex();
        return e
    }
    var i, l;
    return (i = e.data("_scrollexId")) ? (l = o[i], window.clearTimeout(l.timeoutId), delete o[i], e.removeData("_scrollexId"), l.options.terminate && l.options.terminate.apply(this), e) : e
}
}(jQuery);